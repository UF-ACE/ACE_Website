{"ast":null,"code":"import * as React from 'react';\nimport { Children, isValidElement, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useListContext, useResourceContext, useTranslate } from 'ra-core';\nimport { Checkbox, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport classnames from 'classnames';\nimport DatagridHeaderCell from './DatagridHeaderCell';\n/**\n * The default Datagrid Header component.\n *\n * Renders select all checkbox as well as column header buttons used for sorting.\n */\n\nexport var DatagridHeader = function (props) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _a = props.hasExpand,\n      hasExpand = _a === void 0 ? false : _a,\n      _b = props.hasBulkActions,\n      hasBulkActions = _b === void 0 ? false : _b,\n      isRowSelectable = props.isRowSelectable;\n  var resource = useResourceContext(props);\n  var translate = useTranslate();\n\n  var _c = useListContext(props),\n      currentSort = _c.currentSort,\n      data = _c.data,\n      ids = _c.ids,\n      onSelect = _c.onSelect,\n      selectedIds = _c.selectedIds,\n      setSort = _c.setSort;\n\n  var updateSortCallback = useCallback(function (event) {\n    event.stopPropagation();\n    var newField = event.currentTarget.dataset.field;\n    var newOrder = currentSort.field === newField ? currentSort.order === 'ASC' ? 'DESC' : 'ASC' : event.currentTarget.dataset.order;\n    setSort(newField, newOrder);\n  }, [currentSort.field, currentSort.order, setSort]);\n  var updateSort = setSort ? updateSortCallback : null;\n  var handleSelectAll = useCallback(function (event) {\n    if (event.target.checked) {\n      var all = ids.concat(selectedIds.filter(function (id) {\n        return !ids.includes(id);\n      }));\n      onSelect(isRowSelectable ? all.filter(function (id) {\n        return isRowSelectable(data[id]);\n      }) : all);\n    } else {\n      onSelect([]);\n    }\n  }, [data, ids, onSelect, isRowSelectable, selectedIds]);\n  var selectableIds = isRowSelectable ? ids.filter(function (id) {\n    return isRowSelectable(data[id]);\n  }) : ids;\n  return React.createElement(TableHead, {\n    className: classnames(className, classes.thead)\n  }, React.createElement(TableRow, {\n    className: classnames(classes.row, classes.headerRow)\n  }, hasExpand && React.createElement(TableCell, {\n    padding: \"none\",\n    className: classnames(classes.headerCell, classes.expandHeader)\n  }), hasBulkActions && selectedIds && React.createElement(TableCell, {\n    padding: \"checkbox\",\n    className: classes.headerCell\n  }, React.createElement(Checkbox, {\n    \"aria-label\": translate('ra.action.select_all', {\n      _: 'Select all'\n    }),\n    className: \"select-all\",\n    color: \"primary\",\n    checked: selectedIds.length > 0 && selectableIds.length > 0 && selectableIds.every(function (id) {\n      return selectedIds.includes(id);\n    }),\n    onChange: handleSelectAll\n  })), Children.map(children, function (field, index) {\n    return isValidElement(field) ? React.createElement(DatagridHeaderCell, {\n      className: classes.headerCell,\n      currentSort: currentSort,\n      field: field,\n      isSorting: currentSort.field === (field.props.sortBy || field.props.source),\n      key: field.props.source || index,\n      resource: resource,\n      updateSort: updateSort\n    }) : null;\n  })));\n};\nDatagridHeader.propTypes = {\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  currentSort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  hasExpand: PropTypes.bool,\n  hasBulkActions: PropTypes.bool,\n  ids: PropTypes.arrayOf(PropTypes.any),\n  isRowSelectable: PropTypes.func,\n  isRowExpandable: PropTypes.func,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  setSort: PropTypes.func\n};\nDatagridHeader.displayName = 'DatagridHeader';","map":{"version":3,"sources":["/Users/cameronkeene/Documents/GitHub/ACE_Website/client/node_modules/ra-ui-materialui/esm/list/datagrid/DatagridHeader.js"],"names":["React","Children","isValidElement","useCallback","PropTypes","useListContext","useResourceContext","useTranslate","Checkbox","TableCell","TableHead","TableRow","classnames","DatagridHeaderCell","DatagridHeader","props","children","classes","className","_a","hasExpand","_b","hasBulkActions","isRowSelectable","resource","translate","_c","currentSort","data","ids","onSelect","selectedIds","setSort","updateSortCallback","event","stopPropagation","newField","currentTarget","dataset","field","newOrder","order","updateSort","handleSelectAll","target","checked","all","concat","filter","id","includes","selectableIds","createElement","thead","row","headerRow","padding","headerCell","expandHeader","_","color","length","every","onChange","map","index","isSorting","sortBy","source","key","propTypes","node","object","string","exact","any","bool","arrayOf","func","isRowExpandable","onToggleItem","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Children, isValidElement, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useListContext, useResourceContext, useTranslate, } from 'ra-core';\nimport { Checkbox, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport classnames from 'classnames';\nimport DatagridHeaderCell from './DatagridHeaderCell';\n/**\n * The default Datagrid Header component.\n *\n * Renders select all checkbox as well as column header buttons used for sorting.\n */\nexport var DatagridHeader = function (props) {\n    var children = props.children, classes = props.classes, className = props.className, _a = props.hasExpand, hasExpand = _a === void 0 ? false : _a, _b = props.hasBulkActions, hasBulkActions = _b === void 0 ? false : _b, isRowSelectable = props.isRowSelectable;\n    var resource = useResourceContext(props);\n    var translate = useTranslate();\n    var _c = useListContext(props), currentSort = _c.currentSort, data = _c.data, ids = _c.ids, onSelect = _c.onSelect, selectedIds = _c.selectedIds, setSort = _c.setSort;\n    var updateSortCallback = useCallback(function (event) {\n        event.stopPropagation();\n        var newField = event.currentTarget.dataset.field;\n        var newOrder = currentSort.field === newField\n            ? currentSort.order === 'ASC'\n                ? 'DESC'\n                : 'ASC'\n            : event.currentTarget.dataset.order;\n        setSort(newField, newOrder);\n    }, [currentSort.field, currentSort.order, setSort]);\n    var updateSort = setSort ? updateSortCallback : null;\n    var handleSelectAll = useCallback(function (event) {\n        if (event.target.checked) {\n            var all = ids.concat(selectedIds.filter(function (id) { return !ids.includes(id); }));\n            onSelect(isRowSelectable\n                ? all.filter(function (id) { return isRowSelectable(data[id]); })\n                : all);\n        }\n        else {\n            onSelect([]);\n        }\n    }, [data, ids, onSelect, isRowSelectable, selectedIds]);\n    var selectableIds = isRowSelectable\n        ? ids.filter(function (id) { return isRowSelectable(data[id]); })\n        : ids;\n    return (React.createElement(TableHead, { className: classnames(className, classes.thead) },\n        React.createElement(TableRow, { className: classnames(classes.row, classes.headerRow) },\n            hasExpand && (React.createElement(TableCell, { padding: \"none\", className: classnames(classes.headerCell, classes.expandHeader) })),\n            hasBulkActions && selectedIds && (React.createElement(TableCell, { padding: \"checkbox\", className: classes.headerCell },\n                React.createElement(Checkbox, { \"aria-label\": translate('ra.action.select_all', {\n                        _: 'Select all',\n                    }), className: \"select-all\", color: \"primary\", checked: selectedIds.length > 0 &&\n                        selectableIds.length > 0 &&\n                        selectableIds.every(function (id) {\n                            return selectedIds.includes(id);\n                        }), onChange: handleSelectAll }))),\n            Children.map(children, function (field, index) {\n                return isValidElement(field) ? (React.createElement(DatagridHeaderCell, { className: classes.headerCell, currentSort: currentSort, field: field, isSorting: currentSort.field ===\n                        (field.props.sortBy ||\n                            field.props.source), key: field.props.source || index, resource: resource, updateSort: updateSort })) : null;\n            }))));\n};\nDatagridHeader.propTypes = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    currentSort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.any,\n    hasExpand: PropTypes.bool,\n    hasBulkActions: PropTypes.bool,\n    ids: PropTypes.arrayOf(PropTypes.any),\n    isRowSelectable: PropTypes.func,\n    isRowExpandable: PropTypes.func,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    setSort: PropTypes.func,\n};\nDatagridHeader.displayName = 'DatagridHeader';\n"]},"metadata":{},"sourceType":"module"}