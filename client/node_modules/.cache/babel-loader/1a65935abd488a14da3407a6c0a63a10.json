{"ast":null,"code":"import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport getFormInitialValues from './getFormInitialValues';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\n\nvar useInitializeFormWithRecord = function (record) {\n  var form = useForm();\n  useEffect(function () {\n    if (!record) {\n      return;\n    }\n\n    var initialValues = getFormInitialValues(form.getState().initialValues, undefined, record);\n\n    if (isEqual(form.getState().initialValues, initialValues)) {\n      return;\n    } // Disable this option when re-initializing the form because in this case, it should reset the dirty state of all fields\n    // We do need to keep this option for dynamically added inputs though which is why it is kept at the form level\n\n\n    form.setConfig('keepDirtyOnReinitialize', false);\n    form.restart(initialValues);\n    form.setConfig('keepDirtyOnReinitialize', true);\n  }, [form, JSON.stringify(record)]); // eslint-disable-line react-hooks/exhaustive-deps\n};\n\nexport default useInitializeFormWithRecord;","map":{"version":3,"sources":["/Users/cameronkeene/Documents/GitHub/ACE_Website/client/node_modules/ra-core/esm/form/useInitializeFormWithRecord.js"],"names":["useEffect","useForm","isEqual","getFormInitialValues","useInitializeFormWithRecord","record","form","initialValues","getState","undefined","setConfig","restart","JSON","stringify"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA;AACA;AACA;;AACA,IAAIC,2BAA2B,GAAG,UAAUC,MAAV,EAAkB;AAChD,MAAIC,IAAI,GAAGL,OAAO,EAAlB;AACAD,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI,CAACK,MAAL,EAAa;AACT;AACH;;AACD,QAAIE,aAAa,GAAGJ,oBAAoB,CAACG,IAAI,CAACE,QAAL,GAAgBD,aAAjB,EAAgCE,SAAhC,EAA2CJ,MAA3C,CAAxC;;AACA,QAAIH,OAAO,CAACI,IAAI,CAACE,QAAL,GAAgBD,aAAjB,EAAgCA,aAAhC,CAAX,EAA2D;AACvD;AACH,KAPiB,CAQlB;AACA;;;AACAD,IAAAA,IAAI,CAACI,SAAL,CAAe,yBAAf,EAA0C,KAA1C;AACAJ,IAAAA,IAAI,CAACK,OAAL,CAAaJ,aAAb;AACAD,IAAAA,IAAI,CAACI,SAAL,CAAe,yBAAf,EAA0C,IAA1C;AACH,GAbQ,EAaN,CAACJ,IAAD,EAAOM,IAAI,CAACC,SAAL,CAAeR,MAAf,CAAP,CAbM,CAAT,CAFgD,CAeZ;AACvC,CAhBD;;AAiBA,eAAeD,2BAAf","sourcesContent":["import { useEffect } from 'react';\nimport { useForm } from 'react-final-form';\nimport isEqual from 'lodash/isEqual';\nimport getFormInitialValues from './getFormInitialValues';\n/**\n * Restore the record values which should override any default values specified on the form.\n */\nvar useInitializeFormWithRecord = function (record) {\n    var form = useForm();\n    useEffect(function () {\n        if (!record) {\n            return;\n        }\n        var initialValues = getFormInitialValues(form.getState().initialValues, undefined, record);\n        if (isEqual(form.getState().initialValues, initialValues)) {\n            return;\n        }\n        // Disable this option when re-initializing the form because in this case, it should reset the dirty state of all fields\n        // We do need to keep this option for dynamically added inputs though which is why it is kept at the form level\n        form.setConfig('keepDirtyOnReinitialize', false);\n        form.restart(initialValues);\n        form.setConfig('keepDirtyOnReinitialize', true);\n    }, [form, JSON.stringify(record)]); // eslint-disable-line react-hooks/exhaustive-deps\n};\nexport default useInitializeFormWithRecord;\n"]},"metadata":{},"sourceType":"module"}