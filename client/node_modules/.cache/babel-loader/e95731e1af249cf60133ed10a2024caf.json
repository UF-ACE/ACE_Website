{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport { useMemo, useState, useEffect, useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { useGetMany } from '../../dataProvider';\nimport { useForm } from 'react-final-form';\nimport useGetMatching from '../../dataProvider/useGetMatching';\nimport { useTranslate } from '../../i18n';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\nimport { useResourceContext } from '../../core';\nimport { usePaginationState, useSortState } from '..';\nimport { indexById, removeEmpty, useSafeSetState } from '../../util';\n/**\n * Prepare data for the ReferenceArrayInput components\n *\n * @example\n *\n * const { choices, error, loaded, loading } = useReferenceArrayInputController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {string} props.basePath basepath to current resource\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @return {Object} controllerProps Fetched data and callbacks for the ReferenceArrayInput components\n */\n\nexport var useReferenceArrayInputController = function (props) {\n  var defaultFilter = props.filter,\n      _a = props.filterToQuery,\n      filterToQuery = _a === void 0 ? defaultFilterToQuery : _a,\n      input = props.input,\n      _b = props.page,\n      initialPage = _b === void 0 ? 1 : _b,\n      _c = props.perPage,\n      initialPerPage = _c === void 0 ? 25 : _c,\n      _d = props.sort,\n      initialSort = _d === void 0 ? {\n    field: 'id',\n    order: 'DESC'\n  } : _d,\n      options = props.options,\n      reference = props.reference,\n      source = props.source,\n      enableGetChoices = props.enableGetChoices;\n  var resource = useResourceContext(props);\n  var translate = useTranslate(); // We store the current input value in a ref so that we are able to fetch\n  // only the missing references when the input value changes\n\n  var inputValue = useRef(input.value);\n\n  var _e = useState(input.value),\n      idsToFetch = _e[0],\n      setIdsToFetch = _e[1];\n\n  var _f = useState(EmptyArray),\n      idsToGetFromStore = _f[0],\n      setIdsToGetFromStore = _f[1];\n\n  var referenceRecordsFromStore = useSelector(function (state) {\n    return idsToGetFromStore.map(function (id) {\n      return state.admin.resources[reference].data[id];\n    });\n  }); // optimization: we fetch selected items only once. When the user selects more items,\n  // as we already have the past selected items in the store, we don't fetch them.\n\n  useEffect(function () {\n    // Only fetch new ids\n    var newIdsToFetch = difference(input.value, inputValue.current); // Only get from store ids selected and already fetched\n\n    var newIdsToGetFromStore = difference(input.value, newIdsToFetch);\n    /*\n        input.value (current)\n            +------------------------+\n            | ********************** |\n            | ********************** |  inputValue.current (old)\n            | ********** +-----------------------+\n            | ********** | ooooooooo |           |\n            | ********** | ooooooooo |           |\n            | ********** | ooooooooo |           |\n            | ********** | ooooooooo |           |\n            +---|--------|------|----+           |\n                |        |      |                |\n                |        |      |                |\n                |        +------|----------------+\n                |               |\n        newIdsToFetch    newIdsToGetFromStore\n    */\n    // Change states each time input values changes to avoid keeping previous values no more selected\n\n    if (!isEqual(idsToFetch, newIdsToFetch)) {\n      setIdsToFetch(newIdsToFetch);\n    }\n\n    if (!isEqual(idsToGetFromStore, newIdsToGetFromStore)) {\n      setIdsToGetFromStore(newIdsToGetFromStore);\n    }\n\n    inputValue.current = input.value;\n  }, [idsToFetch, idsToGetFromStore, input.value, setIdsToFetch, setIdsToGetFromStore]); // pagination logic\n\n  var _g = usePaginationState({\n    page: initialPage,\n    perPage: initialPerPage\n  }),\n      page = _g.page,\n      setPage = _g.setPage,\n      perPage = _g.perPage,\n      setPerPage = _g.setPerPage,\n      pagination = _g.pagination,\n      setPagination = _g.setPagination;\n\n  var form = useForm();\n  var onSelect = useCallback(function (newIds) {\n    // This could happen when user unselect all items using the datagrid for instance\n    if (newIds.length === 0) {\n      form.change(input.name, EmptyArray);\n      return;\n    }\n\n    var newValue = new Set(input.value);\n    newIds.forEach(function (newId) {\n      newValue.add(newId);\n    });\n    form.change(input.name, Array.from(newValue));\n  }, [form, input.value, input.name]);\n  var onUnselectItems = useCallback(function () {\n    form.change(input.name, EmptyArray);\n  }, [form, input.name]);\n  var onToggleItem = useCallback(function (id) {\n    if (input.value.some(function (selectedId) {\n      return selectedId === id;\n    })) {\n      form.change(input.name, input.value.filter(function (selectedId) {\n        return selectedId !== id;\n      }));\n    } else {\n      form.change(input.name, __spreadArray(__spreadArray([], input.value, true), [id], false));\n    }\n  }, [form, input.name, input.value]); // sort logic\n\n  var sortRef = useRef(initialSort);\n\n  var _h = useSortState(initialSort),\n      sort = _h.sort,\n      setSort = _h.setSort; // ReferenceArrayInput.setSort had a different signature than the one from ListContext.\n  // In order to not break backward compatibility, we added this temporary setSortForList in the\n  // ReferenceArrayInputContext\n\n\n  var setSortForList = useCallback(function (field, order) {\n    if (order === void 0) {\n      order = 'ASC';\n    }\n\n    setSort({\n      field: field,\n      order: order\n    });\n    setPage(1);\n  }, [setPage, setSort]); // Ensure sort can be updated through props too, not just by using the setSort function\n\n  useEffect(function () {\n    if (!isEqual(initialSort, sortRef.current)) {\n      setSort(initialSort);\n    }\n  }, [setSort, initialSort]); // Ensure pagination can be updated through props too, not just by using the setPagination function\n\n  var paginationRef = useRef({\n    initialPage: initialPage,\n    initialPerPage: initialPerPage\n  });\n  useEffect(function () {\n    if (!isEqual({\n      initialPage: initialPage,\n      initialPerPage: initialPerPage\n    }, paginationRef.current)) {\n      setPagination({\n        page: initialPage,\n        perPage: initialPerPage\n      });\n    }\n  }, [setPagination, initialPage, initialPerPage]); // filter logic\n\n  var _j = useState(''),\n      queryFilter = _j[0],\n      setFilter = _j[1];\n\n  var filterRef = useRef(defaultFilter);\n\n  var _k = useSafeSetState({}),\n      displayedFilters = _k[0],\n      setDisplayedFilters = _k[1];\n\n  var _l = useSafeSetState(defaultFilter),\n      filterValues = _l[0],\n      setFilterValues = _l[1];\n\n  var hideFilter = useCallback(function (filterName) {\n    setDisplayedFilters(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n    setFilterValues(function (previousState) {\n      var _a = previousState,\n          _b = filterName,\n          _ = _a[_b],\n          newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return newState;\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var showFilter = useCallback(function (filterName, defaultValue) {\n    setDisplayedFilters(function (previousState) {\n      var _a;\n\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a));\n    });\n    setFilterValues(function (previousState) {\n      var _a;\n\n      return __assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a));\n    });\n  }, [setDisplayedFilters, setFilterValues]);\n  var setFilters = useCallback(function (filters, displayedFilters) {\n    setFilterValues(removeEmpty(filters));\n    setDisplayedFilters(displayedFilters);\n    setPage(1);\n  }, [setDisplayedFilters, setFilterValues, setPage]); // handle filter prop change\n\n  useEffect(function () {\n    if (!isEqual(defaultFilter, filterRef.current)) {\n      filterRef.current = defaultFilter;\n      setFilterValues(defaultFilter);\n    }\n  }); // Merge the user filters with the default ones\n\n  var finalFilter = useMemo(function () {\n    return __assign(__assign({}, defaultFilter), filterToQuery(queryFilter));\n  }, [queryFilter, defaultFilter, filterToQuery]);\n\n  var _m = useGetMany(reference, idsToFetch || EmptyArray),\n      referenceRecordsFetched = _m.data,\n      loaded = _m.loaded,\n      refetchGetMany = _m.refetch;\n\n  var referenceRecords = referenceRecordsFetched ? referenceRecordsFetched.concat(referenceRecordsFromStore) : referenceRecordsFromStore; // filter out not found references - happens when the dataProvider doesn't guarantee referential integrity\n\n  var finalReferenceRecords = referenceRecords.filter(Boolean);\n  var isGetMatchingEnabled = enableGetChoices ? enableGetChoices(finalFilter) : true;\n\n  var _o = useGetMatching(reference, pagination, sort, finalFilter, source, resource, options ? __assign(__assign({}, options), {\n    enabled: isGetMatchingEnabled\n  }) : {\n    enabled: isGetMatchingEnabled\n  }),\n      matchingReferences = _o.data,\n      matchingReferencesIds = _o.ids,\n      total = _o.total,\n      refetchGetMatching = _o.refetch; // We merge the currently selected records with the matching ones, otherwise\n  // the component displaying the currently selected records may fail\n\n\n  var finalMatchingReferences = matchingReferences && matchingReferences.length > 0 ? mergeReferences(matchingReferences, finalReferenceRecords) : finalReferenceRecords.length > 0 ? finalReferenceRecords : matchingReferences;\n  var dataStatus = getDataStatus({\n    input: input,\n    matchingReferences: finalMatchingReferences,\n    referenceRecords: finalReferenceRecords,\n    translate: translate\n  });\n  var refetch = useCallback(function () {\n    refetchGetMany();\n    refetchGetMatching();\n  }, [refetchGetMany, refetchGetMatching]);\n  return {\n    basePath: props.basePath || \"/\" + resource,\n    choices: dataStatus.choices,\n    currentSort: sort,\n    // For the ListContext, we don't want to always display the selected items first.\n    // Indeed it wouldn't work well regarding sorting and pagination\n    data: matchingReferences && matchingReferences.length > 0 ? indexById(matchingReferences) : {},\n    displayedFilters: displayedFilters,\n    error: dataStatus.error,\n    filterValues: filterValues,\n    hasCreate: false,\n    hideFilter: hideFilter,\n    // For the ListContext, we don't want to always display the selected items first.\n    // Indeed it wouldn't work well regarding sorting and pagination\n    ids: matchingReferencesIds || EmptyArray,\n    loaded: loaded,\n    loading: dataStatus.waiting,\n    onSelect: onSelect,\n    onToggleItem: onToggleItem,\n    onUnselectItems: onUnselectItems,\n    page: page,\n    perPage: perPage,\n    refetch: refetch,\n    resource: resource,\n    selectedIds: input.value || EmptyArray,\n    setFilter: setFilter,\n    setFilters: setFilters,\n    setPage: setPage,\n    setPagination: setPagination,\n    setPerPage: setPerPage,\n    setSort: setSort,\n    setSortForList: setSortForList,\n    showFilter: showFilter,\n    warning: dataStatus.warning,\n    total: total\n  };\n};\nvar EmptyArray = []; // concatenate and deduplicate two lists of records\n\nvar mergeReferences = function (ref1, ref2) {\n  var res = __spreadArray([], ref1, true);\n\n  var ids = ref1.map(function (ref) {\n    return ref.id;\n  });\n  ref2.forEach(function (ref) {\n    if (!ids.includes(ref.id)) {\n      ids.push(ref.id);\n      res.push(ref);\n    }\n  });\n  return res;\n};\n\nvar defaultFilterToQuery = function (searchText) {\n  return {\n    q: searchText\n  };\n};","map":{"version":3,"sources":["/Users/cameronkeene/Documents/GitHub/ACE_Website/client/node_modules/ra-core/esm/controller/input/useReferenceArrayInputController.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__spreadArray","to","from","pack","l","ar","Array","slice","concat","useMemo","useState","useEffect","useRef","useCallback","useSelector","isEqual","difference","useGetMany","useForm","useGetMatching","useTranslate","getStatusForArrayInput","getDataStatus","useResourceContext","usePaginationState","useSortState","indexById","removeEmpty","useSafeSetState","useReferenceArrayInputController","props","defaultFilter","filter","_a","filterToQuery","defaultFilterToQuery","input","_b","page","initialPage","_c","perPage","initialPerPage","_d","sort","initialSort","field","order","options","reference","source","enableGetChoices","resource","translate","inputValue","value","_e","idsToFetch","setIdsToFetch","_f","EmptyArray","idsToGetFromStore","setIdsToGetFromStore","referenceRecordsFromStore","state","map","id","admin","resources","data","newIdsToFetch","current","newIdsToGetFromStore","_g","setPage","setPerPage","pagination","setPagination","form","onSelect","newIds","change","name","newValue","Set","forEach","newId","add","onUnselectItems","onToggleItem","some","selectedId","sortRef","_h","setSort","setSortForList","paginationRef","_j","queryFilter","setFilter","filterRef","_k","displayedFilters","setDisplayedFilters","_l","filterValues","setFilterValues","hideFilter","filterName","previousState","_","newState","showFilter","defaultValue","setFilters","filters","finalFilter","_m","referenceRecordsFetched","loaded","refetchGetMany","refetch","referenceRecords","finalReferenceRecords","Boolean","isGetMatchingEnabled","_o","enabled","matchingReferences","matchingReferencesIds","ids","total","refetchGetMatching","finalMatchingReferences","mergeReferences","dataStatus","basePath","choices","currentSort","error","hasCreate","loading","waiting","selectedIds","warning","ref1","ref2","res","ref","includes","push","searchText","q"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useMemo, useState, useEffect, useRef, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { useGetMany } from '../../dataProvider';\nimport { useForm } from 'react-final-form';\nimport useGetMatching from '../../dataProvider/useGetMatching';\nimport { useTranslate } from '../../i18n';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\nimport { useResourceContext } from '../../core';\nimport { usePaginationState, useSortState } from '..';\nimport { indexById, removeEmpty, useSafeSetState } from '../../util';\n/**\n * Prepare data for the ReferenceArrayInput components\n *\n * @example\n *\n * const { choices, error, loaded, loading } = useReferenceArrayInputController({\n *      basePath: 'resource';\n *      record: { referenceIds: ['id1', 'id2']};\n *      reference: 'reference';\n *      resource: 'resource';\n *      source: 'referenceIds';\n * });\n *\n * @param {Object} props\n * @param {string} props.basePath basepath to current resource\n * @param {Object} props.record The current resource record\n * @param {string} props.reference The linked resource name\n * @param {string} props.resource The current resource name\n * @param {string} props.source The key of the linked resource identifier\n *\n * @param {Props} props\n *\n * @return {Object} controllerProps Fetched data and callbacks for the ReferenceArrayInput components\n */\nexport var useReferenceArrayInputController = function (props) {\n    var defaultFilter = props.filter, _a = props.filterToQuery, filterToQuery = _a === void 0 ? defaultFilterToQuery : _a, input = props.input, _b = props.page, initialPage = _b === void 0 ? 1 : _b, _c = props.perPage, initialPerPage = _c === void 0 ? 25 : _c, _d = props.sort, initialSort = _d === void 0 ? { field: 'id', order: 'DESC' } : _d, options = props.options, reference = props.reference, source = props.source, enableGetChoices = props.enableGetChoices;\n    var resource = useResourceContext(props);\n    var translate = useTranslate();\n    // We store the current input value in a ref so that we are able to fetch\n    // only the missing references when the input value changes\n    var inputValue = useRef(input.value);\n    var _e = useState(input.value), idsToFetch = _e[0], setIdsToFetch = _e[1];\n    var _f = useState(EmptyArray), idsToGetFromStore = _f[0], setIdsToGetFromStore = _f[1];\n    var referenceRecordsFromStore = useSelector(function (state) {\n        return idsToGetFromStore.map(function (id) { return state.admin.resources[reference].data[id]; });\n    });\n    // optimization: we fetch selected items only once. When the user selects more items,\n    // as we already have the past selected items in the store, we don't fetch them.\n    useEffect(function () {\n        // Only fetch new ids\n        var newIdsToFetch = difference(input.value, inputValue.current);\n        // Only get from store ids selected and already fetched\n        var newIdsToGetFromStore = difference(input.value, newIdsToFetch);\n        /*\n            input.value (current)\n                +------------------------+\n                | ********************** |\n                | ********************** |  inputValue.current (old)\n                | ********** +-----------------------+\n                | ********** | ooooooooo |           |\n                | ********** | ooooooooo |           |\n                | ********** | ooooooooo |           |\n                | ********** | ooooooooo |           |\n                +---|--------|------|----+           |\n                    |        |      |                |\n                    |        |      |                |\n                    |        +------|----------------+\n                    |               |\n            newIdsToFetch    newIdsToGetFromStore\n        */\n        // Change states each time input values changes to avoid keeping previous values no more selected\n        if (!isEqual(idsToFetch, newIdsToFetch)) {\n            setIdsToFetch(newIdsToFetch);\n        }\n        if (!isEqual(idsToGetFromStore, newIdsToGetFromStore)) {\n            setIdsToGetFromStore(newIdsToGetFromStore);\n        }\n        inputValue.current = input.value;\n    }, [\n        idsToFetch,\n        idsToGetFromStore,\n        input.value,\n        setIdsToFetch,\n        setIdsToGetFromStore,\n    ]);\n    // pagination logic\n    var _g = usePaginationState({\n        page: initialPage,\n        perPage: initialPerPage,\n    }), page = _g.page, setPage = _g.setPage, perPage = _g.perPage, setPerPage = _g.setPerPage, pagination = _g.pagination, setPagination = _g.setPagination;\n    var form = useForm();\n    var onSelect = useCallback(function (newIds) {\n        // This could happen when user unselect all items using the datagrid for instance\n        if (newIds.length === 0) {\n            form.change(input.name, EmptyArray);\n            return;\n        }\n        var newValue = new Set(input.value);\n        newIds.forEach(function (newId) {\n            newValue.add(newId);\n        });\n        form.change(input.name, Array.from(newValue));\n    }, [form, input.value, input.name]);\n    var onUnselectItems = useCallback(function () {\n        form.change(input.name, EmptyArray);\n    }, [form, input.name]);\n    var onToggleItem = useCallback(function (id) {\n        if (input.value.some(function (selectedId) { return selectedId === id; })) {\n            form.change(input.name, input.value.filter(function (selectedId) { return selectedId !== id; }));\n        }\n        else {\n            form.change(input.name, __spreadArray(__spreadArray([], input.value, true), [id], false));\n        }\n    }, [form, input.name, input.value]);\n    // sort logic\n    var sortRef = useRef(initialSort);\n    var _h = useSortState(initialSort), sort = _h.sort, setSort = _h.setSort;\n    // ReferenceArrayInput.setSort had a different signature than the one from ListContext.\n    // In order to not break backward compatibility, we added this temporary setSortForList in the\n    // ReferenceArrayInputContext\n    var setSortForList = useCallback(function (field, order) {\n        if (order === void 0) { order = 'ASC'; }\n        setSort({ field: field, order: order });\n        setPage(1);\n    }, [setPage, setSort]);\n    // Ensure sort can be updated through props too, not just by using the setSort function\n    useEffect(function () {\n        if (!isEqual(initialSort, sortRef.current)) {\n            setSort(initialSort);\n        }\n    }, [setSort, initialSort]);\n    // Ensure pagination can be updated through props too, not just by using the setPagination function\n    var paginationRef = useRef({ initialPage: initialPage, initialPerPage: initialPerPage });\n    useEffect(function () {\n        if (!isEqual({ initialPage: initialPage, initialPerPage: initialPerPage }, paginationRef.current)) {\n            setPagination({ page: initialPage, perPage: initialPerPage });\n        }\n    }, [setPagination, initialPage, initialPerPage]);\n    // filter logic\n    var _j = useState(''), queryFilter = _j[0], setFilter = _j[1];\n    var filterRef = useRef(defaultFilter);\n    var _k = useSafeSetState({}), displayedFilters = _k[0], setDisplayedFilters = _k[1];\n    var _l = useSafeSetState(defaultFilter), filterValues = _l[0], setFilterValues = _l[1];\n    var hideFilter = useCallback(function (filterName) {\n        setDisplayedFilters(function (previousState) {\n            var _a = previousState, _b = filterName, _ = _a[_b], newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n            return newState;\n        });\n        setFilterValues(function (previousState) {\n            var _a = previousState, _b = filterName, _ = _a[_b], newState = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n            return newState;\n        });\n    }, [setDisplayedFilters, setFilterValues]);\n    var showFilter = useCallback(function (filterName, defaultValue) {\n        setDisplayedFilters(function (previousState) {\n            var _a;\n            return (__assign(__assign({}, previousState), (_a = {}, _a[filterName] = true, _a)));\n        });\n        setFilterValues(function (previousState) {\n            var _a;\n            return (__assign(__assign({}, previousState), (_a = {}, _a[filterName] = defaultValue, _a)));\n        });\n    }, [setDisplayedFilters, setFilterValues]);\n    var setFilters = useCallback(function (filters, displayedFilters) {\n        setFilterValues(removeEmpty(filters));\n        setDisplayedFilters(displayedFilters);\n        setPage(1);\n    }, [setDisplayedFilters, setFilterValues, setPage]);\n    // handle filter prop change\n    useEffect(function () {\n        if (!isEqual(defaultFilter, filterRef.current)) {\n            filterRef.current = defaultFilter;\n            setFilterValues(defaultFilter);\n        }\n    });\n    // Merge the user filters with the default ones\n    var finalFilter = useMemo(function () { return (__assign(__assign({}, defaultFilter), filterToQuery(queryFilter))); }, [queryFilter, defaultFilter, filterToQuery]);\n    var _m = useGetMany(reference, idsToFetch || EmptyArray), referenceRecordsFetched = _m.data, loaded = _m.loaded, refetchGetMany = _m.refetch;\n    var referenceRecords = referenceRecordsFetched\n        ? referenceRecordsFetched.concat(referenceRecordsFromStore)\n        : referenceRecordsFromStore;\n    // filter out not found references - happens when the dataProvider doesn't guarantee referential integrity\n    var finalReferenceRecords = referenceRecords.filter(Boolean);\n    var isGetMatchingEnabled = enableGetChoices\n        ? enableGetChoices(finalFilter)\n        : true;\n    var _o = useGetMatching(reference, pagination, sort, finalFilter, source, resource, options\n        ? __assign(__assign({}, options), { enabled: isGetMatchingEnabled }) : { enabled: isGetMatchingEnabled }), matchingReferences = _o.data, matchingReferencesIds = _o.ids, total = _o.total, refetchGetMatching = _o.refetch;\n    // We merge the currently selected records with the matching ones, otherwise\n    // the component displaying the currently selected records may fail\n    var finalMatchingReferences = matchingReferences && matchingReferences.length > 0\n        ? mergeReferences(matchingReferences, finalReferenceRecords)\n        : finalReferenceRecords.length > 0\n            ? finalReferenceRecords\n            : matchingReferences;\n    var dataStatus = getDataStatus({\n        input: input,\n        matchingReferences: finalMatchingReferences,\n        referenceRecords: finalReferenceRecords,\n        translate: translate,\n    });\n    var refetch = useCallback(function () {\n        refetchGetMany();\n        refetchGetMatching();\n    }, [refetchGetMany, refetchGetMatching]);\n    return {\n        basePath: props.basePath || \"/\" + resource,\n        choices: dataStatus.choices,\n        currentSort: sort,\n        // For the ListContext, we don't want to always display the selected items first.\n        // Indeed it wouldn't work well regarding sorting and pagination\n        data: matchingReferences && matchingReferences.length > 0\n            ? indexById(matchingReferences)\n            : {},\n        displayedFilters: displayedFilters,\n        error: dataStatus.error,\n        filterValues: filterValues,\n        hasCreate: false,\n        hideFilter: hideFilter,\n        // For the ListContext, we don't want to always display the selected items first.\n        // Indeed it wouldn't work well regarding sorting and pagination\n        ids: matchingReferencesIds || EmptyArray,\n        loaded: loaded,\n        loading: dataStatus.waiting,\n        onSelect: onSelect,\n        onToggleItem: onToggleItem,\n        onUnselectItems: onUnselectItems,\n        page: page,\n        perPage: perPage,\n        refetch: refetch,\n        resource: resource,\n        selectedIds: input.value || EmptyArray,\n        setFilter: setFilter,\n        setFilters: setFilters,\n        setPage: setPage,\n        setPagination: setPagination,\n        setPerPage: setPerPage,\n        setSort: setSort,\n        setSortForList: setSortForList,\n        showFilter: showFilter,\n        warning: dataStatus.warning,\n        total: total,\n    };\n};\nvar EmptyArray = [];\n// concatenate and deduplicate two lists of records\nvar mergeReferences = function (ref1, ref2) {\n    var res = __spreadArray([], ref1, true);\n    var ids = ref1.map(function (ref) { return ref.id; });\n    ref2.forEach(function (ref) {\n        if (!ids.includes(ref.id)) {\n            ids.push(ref.id);\n            res.push(ref);\n        }\n    });\n    return res;\n};\nvar defaultFilterToQuery = function (searchText) { return ({ q: searchText }); };\n"]},"metadata":{},"sourceType":"module"}