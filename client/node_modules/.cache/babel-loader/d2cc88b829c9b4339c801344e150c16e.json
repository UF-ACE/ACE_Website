{"ast":null,"code":"import { useCallback, isValidElement } from 'react';\nimport set from 'lodash/set';\nimport useChoices from './useChoices';\nimport { useTranslate } from '../i18n';\n/*\n * Returns helper functions for suggestions handling.\n *\n * @param allowDuplicates A boolean indicating whether a suggestion can be added several times\n * @param allowEmpty A boolean indicating whether an empty suggestion should be added\n * @param choices An array of available choices\n * @param emptyText The text to use for the empty suggestion. Defaults to an empty string\n * @param emptyValue The value to use for the empty suggestion. Defaults to `null`\n * @param limitChoicesToValue A boolean indicating whether the initial suggestions should be limited to the currently selected one(s)\n * @param matchSuggestion Optional unless `optionText` is a React element. Function which check whether a choice matches a filter. Must return a boolean.\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param selectedItem The currently selected item. May be an array of selected items\n * @param suggestionLimit The maximum number of suggestions returned, excluding the empty one if `allowEmpty` is `true`\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n * - getSuggestions: A function taking a filter value (string) and returning the matching suggestions\n */\n\nvar useSuggestions = function (_a) {\n  var allowCreate = _a.allowCreate,\n      allowDuplicates = _a.allowDuplicates,\n      allowEmpty = _a.allowEmpty,\n      choices = _a.choices,\n      _b = _a.createText,\n      createText = _b === void 0 ? 'ra.action.create' : _b,\n      _c = _a.createValue,\n      createValue = _c === void 0 ? '@@create' : _c,\n      _d = _a.emptyText,\n      emptyText = _d === void 0 ? '' : _d,\n      _e = _a.emptyValue,\n      emptyValue = _e === void 0 ? null : _e,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      matchSuggestion = _a.matchSuggestion,\n      optionText = _a.optionText,\n      optionValue = _a.optionValue,\n      selectedItem = _a.selectedItem,\n      _f = _a.suggestionLimit,\n      suggestionLimit = _f === void 0 ? 0 : _f,\n      translateChoice = _a.translateChoice;\n  var translate = useTranslate();\n\n  var _g = useChoices({\n    optionText: optionText,\n    optionValue: optionValue,\n    translateChoice: translateChoice\n  }),\n      getChoiceText = _g.getChoiceText,\n      getChoiceValue = _g.getChoiceValue; // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  var getSuggestions = useCallback(getSuggestionsFactory({\n    allowCreate: allowCreate,\n    allowDuplicates: allowDuplicates,\n    allowEmpty: allowEmpty,\n    choices: choices,\n    createText: createText,\n    createValue: createValue,\n    emptyText: translate(emptyText, {\n      _: emptyText\n    }),\n    emptyValue: emptyValue,\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    limitChoicesToValue: limitChoicesToValue,\n    matchSuggestion: matchSuggestion,\n    optionText: optionText,\n    optionValue: optionValue,\n    selectedItem: selectedItem,\n    suggestionLimit: suggestionLimit\n  }), [allowCreate, allowDuplicates, allowEmpty, choices, createText, createValue, emptyText, emptyValue, getChoiceText, getChoiceValue, limitChoicesToValue, matchSuggestion, optionText, optionValue, selectedItem, suggestionLimit, translate]);\n  return {\n    getChoiceText: getChoiceText,\n    getChoiceValue: getChoiceValue,\n    getSuggestions: getSuggestions\n  };\n};\n\nexport default useSuggestions;\n\nvar escapeRegExp = function (value) {\n  return value ? value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '';\n}; // $& means the whole matched string\n\n/**\n * Default matcher implementation which check whether the suggestion text matches the filter.\n */\n\n\nvar defaultMatchSuggestion = function (getChoiceText) {\n  return function (filter, suggestion, exact) {\n    if (exact === void 0) {\n      exact = false;\n    }\n\n    var suggestionText = getChoiceText(suggestion);\n    var isReactElement = isValidElement(suggestionText);\n    var regex = escapeRegExp(filter);\n    return isReactElement ? false : suggestionText && suggestionText.match( // We must escape any RegExp reserved characters to avoid errors\n    // For example, the filter might contains * which must be escaped as \\*\n    new RegExp(exact ? \"^\" + regex + \"$\" : regex, 'i'));\n  };\n};\n/**\n * Get the suggestions to display after applying a fuzzy search on the available choices\n *\n * @example\n *\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n */\n\n\nexport var getSuggestionsFactory = function (_a) {\n  var _b = _a.allowCreate,\n      allowCreate = _b === void 0 ? false : _b,\n      _c = _a.allowDuplicates,\n      allowDuplicates = _c === void 0 ? false : _c,\n      _d = _a.allowEmpty,\n      allowEmpty = _d === void 0 ? false : _d,\n      _e = _a.choices,\n      choices = _e === void 0 ? [] : _e,\n      _f = _a.createText,\n      createText = _f === void 0 ? 'ra.action.create' : _f,\n      _g = _a.createValue,\n      createValue = _g === void 0 ? '@@create' : _g,\n      _h = _a.emptyText,\n      emptyText = _h === void 0 ? '' : _h,\n      _j = _a.emptyValue,\n      emptyValue = _j === void 0 ? null : _j,\n      _k = _a.optionText,\n      optionText = _k === void 0 ? 'name' : _k,\n      _l = _a.optionValue,\n      optionValue = _l === void 0 ? 'id' : _l,\n      getChoiceText = _a.getChoiceText,\n      getChoiceValue = _a.getChoiceValue,\n      _m = _a.limitChoicesToValue,\n      limitChoicesToValue = _m === void 0 ? false : _m,\n      _o = _a.matchSuggestion,\n      matchSuggestion = _o === void 0 ? defaultMatchSuggestion(getChoiceText) : _o,\n      selectedItem = _a.selectedItem,\n      _p = _a.suggestionLimit,\n      suggestionLimit = _p === void 0 ? 0 : _p;\n  return function (filter) {\n    var suggestions = []; // if an item is selected and matches the filter\n\n    if (selectedItem && !Array.isArray(selectedItem) && matchSuggestion(filter, selectedItem)) {\n      if (limitChoicesToValue) {\n        // display only the selected item\n        suggestions = choices.filter(function (choice) {\n          return getChoiceValue(choice) === getChoiceValue(selectedItem);\n        });\n      } else if (!allowDuplicates) {\n        // ignore the filter to show more choices\n        suggestions = removeAlreadySelectedSuggestions(choices, selectedItem, getChoiceValue);\n      } else {\n        suggestions = choices;\n      }\n    } else {\n      suggestions = choices.filter(function (choice) {\n        return matchSuggestion(filter, choice);\n      });\n\n      if (!allowDuplicates) {\n        suggestions = removeAlreadySelectedSuggestions(suggestions, selectedItem, getChoiceValue);\n      }\n    }\n\n    suggestions = limitSuggestions(suggestions, suggestionLimit);\n    var hasExactMatch = suggestions.some(function (suggestion) {\n      return matchSuggestion(filter, suggestion, true);\n    });\n\n    if (allowCreate) {\n      var filterIsSelectedItem = // If the selectedItem is an array (for example AutocompleteArrayInput)\n      // we shouldn't try to match\n      !!selectedItem && !Array.isArray(selectedItem) ? matchSuggestion(filter, selectedItem, true) : false;\n\n      if (!hasExactMatch && !filterIsSelectedItem) {\n        suggestions.push(getSuggestion({\n          optionText: optionText,\n          optionValue: optionValue,\n          text: createText,\n          value: createValue\n        }));\n      }\n    }\n\n    if (allowEmpty) {\n      suggestions.unshift(getSuggestion({\n        optionText: optionText,\n        optionValue: optionValue,\n        text: emptyText,\n        value: emptyValue\n      }));\n    }\n\n    return suggestions;\n  };\n};\n/**\n * @example\n *\n * removeAlreadySelectedSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  [{ id: 1, name: 'foo'}]\n * );\n *\n * // Will return [{ id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param selectedItems List of selection\n * @param getChoiceValue Converter function from suggestion to value\n */\n\nvar removeAlreadySelectedSuggestions = function (suggestions, selectedItems, getChoiceValue) {\n  if (!selectedItems) {\n    return suggestions;\n  }\n\n  var selectedValues = Array.isArray(selectedItems) ? selectedItems.map(getChoiceValue) : [getChoiceValue(selectedItems)];\n  return suggestions.filter(function (suggestion) {\n    return !selectedValues.includes(getChoiceValue(suggestion));\n  });\n};\n/**\n * @example\n *\n * limitSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  1\n * );\n *\n * // Will return [{ id: 1, name: 'foo' }]\n *\n * @param suggestions List of suggestions\n * @param limit\n */\n\n\nvar limitSuggestions = function (suggestions, limit) {\n  if (limit === void 0) {\n    limit = 0;\n  }\n\n  return Number.isInteger(limit) && limit > 0 ? suggestions.slice(0, limit) : suggestions;\n};\n/**\n * addSuggestion(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n * );\n *\n * // Will return [{ id: null, name: '' }, { id: 1, name: 'foo' }, , { id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param options\n * @param options.optionText\n */\n\n\nvar getSuggestion = function (_a) {\n  var _b = _a.optionText,\n      optionText = _b === void 0 ? 'name' : _b,\n      _c = _a.optionValue,\n      optionValue = _c === void 0 ? 'id' : _c,\n      _d = _a.text,\n      text = _d === void 0 ? '' : _d,\n      _e = _a.value,\n      value = _e === void 0 ? null : _e;\n  var suggestion = {};\n  set(suggestion, optionValue, value);\n\n  if (typeof optionText === 'string') {\n    set(suggestion, optionText, text);\n  }\n\n  return suggestion;\n};","map":{"version":3,"sources":["/Users/cameronkeene/Documents/GitHub/ACE_Website/client/node_modules/ra-core/esm/form/useSuggestions.js"],"names":["useCallback","isValidElement","set","useChoices","useTranslate","useSuggestions","_a","allowCreate","allowDuplicates","allowEmpty","choices","_b","createText","_c","createValue","_d","emptyText","_e","emptyValue","limitChoicesToValue","matchSuggestion","optionText","optionValue","selectedItem","_f","suggestionLimit","translateChoice","translate","_g","getChoiceText","getChoiceValue","getSuggestions","getSuggestionsFactory","_","escapeRegExp","value","replace","defaultMatchSuggestion","filter","suggestion","exact","suggestionText","isReactElement","regex","match","RegExp","_h","_j","_k","_l","_m","_o","_p","suggestions","Array","isArray","choice","removeAlreadySelectedSuggestions","limitSuggestions","hasExactMatch","some","filterIsSelectedItem","push","getSuggestion","text","unshift","selectedItems","selectedValues","map","includes","limit","Number","isInteger","slice"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,OAA5C;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,YAAT,QAA6B,SAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,UAAUC,EAAV,EAAc;AAC/B,MAAIC,WAAW,GAAGD,EAAE,CAACC,WAArB;AAAA,MAAkCC,eAAe,GAAGF,EAAE,CAACE,eAAvD;AAAA,MAAwEC,UAAU,GAAGH,EAAE,CAACG,UAAxF;AAAA,MAAoGC,OAAO,GAAGJ,EAAE,CAACI,OAAjH;AAAA,MAA0HC,EAAE,GAAGL,EAAE,CAACM,UAAlI;AAAA,MAA8IA,UAAU,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,kBAAhB,GAAqCA,EAAhM;AAAA,MAAoME,EAAE,GAAGP,EAAE,CAACQ,WAA5M;AAAA,MAAyNA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,UAAhB,GAA6BA,EAApQ;AAAA,MAAwQE,EAAE,GAAGT,EAAE,CAACU,SAAhR;AAAA,MAA2RA,SAAS,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA5T;AAAA,MAAgUE,EAAE,GAAGX,EAAE,CAACY,UAAxU;AAAA,MAAoVA,UAAU,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAxX;AAAA,MAA4XE,mBAAmB,GAAGb,EAAE,CAACa,mBAArZ;AAAA,MAA0aC,eAAe,GAAGd,EAAE,CAACc,eAA/b;AAAA,MAAgdC,UAAU,GAAGf,EAAE,CAACe,UAAhe;AAAA,MAA4eC,WAAW,GAAGhB,EAAE,CAACgB,WAA7f;AAAA,MAA0gBC,YAAY,GAAGjB,EAAE,CAACiB,YAA5hB;AAAA,MAA0iBC,EAAE,GAAGlB,EAAE,CAACmB,eAAljB;AAAA,MAAmkBA,eAAe,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,EAAzmB;AAAA,MAA6mBE,eAAe,GAAGpB,EAAE,CAACoB,eAAloB;AACA,MAAIC,SAAS,GAAGvB,YAAY,EAA5B;;AACA,MAAIwB,EAAE,GAAGzB,UAAU,CAAC;AAChBkB,IAAAA,UAAU,EAAEA,UADI;AAEhBC,IAAAA,WAAW,EAAEA,WAFG;AAGhBI,IAAAA,eAAe,EAAEA;AAHD,GAAD,CAAnB;AAAA,MAIIG,aAAa,GAAGD,EAAE,CAACC,aAJvB;AAAA,MAIsCC,cAAc,GAAGF,EAAE,CAACE,cAJ1D,CAH+B,CAQ/B;;;AACA,MAAIC,cAAc,GAAG/B,WAAW,CAACgC,qBAAqB,CAAC;AACnDzB,IAAAA,WAAW,EAAEA,WADsC;AAEnDC,IAAAA,eAAe,EAAEA,eAFkC;AAGnDC,IAAAA,UAAU,EAAEA,UAHuC;AAInDC,IAAAA,OAAO,EAAEA,OAJ0C;AAKnDE,IAAAA,UAAU,EAAEA,UALuC;AAMnDE,IAAAA,WAAW,EAAEA,WANsC;AAOnDE,IAAAA,SAAS,EAAEW,SAAS,CAACX,SAAD,EAAY;AAAEiB,MAAAA,CAAC,EAAEjB;AAAL,KAAZ,CAP+B;AAQnDE,IAAAA,UAAU,EAAEA,UARuC;AASnDW,IAAAA,aAAa,EAAEA,aAToC;AAUnDC,IAAAA,cAAc,EAAEA,cAVmC;AAWnDX,IAAAA,mBAAmB,EAAEA,mBAX8B;AAYnDC,IAAAA,eAAe,EAAEA,eAZkC;AAanDC,IAAAA,UAAU,EAAEA,UAbuC;AAcnDC,IAAAA,WAAW,EAAEA,WAdsC;AAenDC,IAAAA,YAAY,EAAEA,YAfqC;AAgBnDE,IAAAA,eAAe,EAAEA;AAhBkC,GAAD,CAAtB,EAiB5B,CACAlB,WADA,EAEAC,eAFA,EAGAC,UAHA,EAIAC,OAJA,EAKAE,UALA,EAMAE,WANA,EAOAE,SAPA,EAQAE,UARA,EASAW,aATA,EAUAC,cAVA,EAWAX,mBAXA,EAYAC,eAZA,EAaAC,UAbA,EAcAC,WAdA,EAeAC,YAfA,EAgBAE,eAhBA,EAiBAE,SAjBA,CAjB4B,CAAhC;AAoCA,SAAO;AACHE,IAAAA,aAAa,EAAEA,aADZ;AAEHC,IAAAA,cAAc,EAAEA,cAFb;AAGHC,IAAAA,cAAc,EAAEA;AAHb,GAAP;AAKH,CAlDD;;AAmDA,eAAe1B,cAAf;;AACA,IAAI6B,YAAY,GAAG,UAAUC,KAAV,EAAiB;AAChC,SAAOA,KAAK,GAAGA,KAAK,CAACC,OAAN,CAAc,qBAAd,EAAqC,MAArC,CAAH,GAAkD,EAA9D;AACH,CAFD,C,CAEG;;AACH;AACA;AACA;;;AACA,IAAIC,sBAAsB,GAAG,UAAUR,aAAV,EAAyB;AAAE,SAAO,UAAUS,MAAV,EAAkBC,UAAlB,EAA8BC,KAA9B,EAAqC;AAChG,QAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,MAAAA,KAAK,GAAG,KAAR;AAAgB;;AACxC,QAAIC,cAAc,GAAGZ,aAAa,CAACU,UAAD,CAAlC;AACA,QAAIG,cAAc,GAAGzC,cAAc,CAACwC,cAAD,CAAnC;AACA,QAAIE,KAAK,GAAGT,YAAY,CAACI,MAAD,CAAxB;AACA,WAAOI,cAAc,GACf,KADe,GAEfD,cAAc,IACZA,cAAc,CAACG,KAAf,EACA;AACA;AACA,QAAIC,MAAJ,CAAWL,KAAK,GAAG,MAAMG,KAAN,GAAc,GAAjB,GAAuBA,KAAvC,EAA8C,GAA9C,CAHA,CAHR;AAOH,GAZuD;AAYpD,CAZJ;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIX,qBAAqB,GAAG,UAAU1B,EAAV,EAAc;AAC7C,MAAIK,EAAE,GAAGL,EAAE,CAACC,WAAZ;AAAA,MAAyBA,WAAW,GAAGI,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAA/D;AAAA,MAAmEE,EAAE,GAAGP,EAAE,CAACE,eAA3E;AAAA,MAA4FA,eAAe,GAAGK,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAtI;AAAA,MAA0IE,EAAE,GAAGT,EAAE,CAACG,UAAlJ;AAAA,MAA8JA,UAAU,GAAGM,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAAnM;AAAA,MAAuME,EAAE,GAAGX,EAAE,CAACI,OAA/M;AAAA,MAAwNA,OAAO,GAAGO,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAvP;AAAA,MAA2PO,EAAE,GAAGlB,EAAE,CAACM,UAAnQ;AAAA,MAA+QA,UAAU,GAAGY,EAAE,KAAK,KAAK,CAAZ,GAAgB,kBAAhB,GAAqCA,EAAjU;AAAA,MAAqUI,EAAE,GAAGtB,EAAE,CAACQ,WAA7U;AAAA,MAA0VA,WAAW,GAAGc,EAAE,KAAK,KAAK,CAAZ,GAAgB,UAAhB,GAA6BA,EAArY;AAAA,MAAyYkB,EAAE,GAAGxC,EAAE,CAACU,SAAjZ;AAAA,MAA4ZA,SAAS,GAAG8B,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA7b;AAAA,MAAicC,EAAE,GAAGzC,EAAE,CAACY,UAAzc;AAAA,MAAqdA,UAAU,GAAG6B,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAAzf;AAAA,MAA6fC,EAAE,GAAG1C,EAAE,CAACe,UAArgB;AAAA,MAAihBA,UAAU,GAAG2B,EAAE,KAAK,KAAK,CAAZ,GAAgB,MAAhB,GAAyBA,EAAvjB;AAAA,MAA2jBC,EAAE,GAAG3C,EAAE,CAACgB,WAAnkB;AAAA,MAAglBA,WAAW,GAAG2B,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAArnB;AAAA,MAAynBpB,aAAa,GAAGvB,EAAE,CAACuB,aAA5oB;AAAA,MAA2pBC,cAAc,GAAGxB,EAAE,CAACwB,cAA/qB;AAAA,MAA+rBoB,EAAE,GAAG5C,EAAE,CAACa,mBAAvsB;AAAA,MAA4tBA,mBAAmB,GAAG+B,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAA1wB;AAAA,MAA8wBC,EAAE,GAAG7C,EAAE,CAACc,eAAtxB;AAAA,MAAuyBA,eAAe,GAAG+B,EAAE,KAAK,KAAK,CAAZ,GAAgBd,sBAAsB,CAACR,aAAD,CAAtC,GAAwDsB,EAAj3B;AAAA,MAAq3B5B,YAAY,GAAGjB,EAAE,CAACiB,YAAv4B;AAAA,MAAq5B6B,EAAE,GAAG9C,EAAE,CAACmB,eAA75B;AAAA,MAA86BA,eAAe,GAAG2B,EAAE,KAAK,KAAK,CAAZ,GAAgB,CAAhB,GAAoBA,EAAp9B;AACA,SAAO,UAAUd,MAAV,EAAkB;AACrB,QAAIe,WAAW,GAAG,EAAlB,CADqB,CAErB;;AACA,QAAI9B,YAAY,IACZ,CAAC+B,KAAK,CAACC,OAAN,CAAchC,YAAd,CADD,IAEAH,eAAe,CAACkB,MAAD,EAASf,YAAT,CAFnB,EAE2C;AACvC,UAAIJ,mBAAJ,EAAyB;AACrB;AACAkC,QAAAA,WAAW,GAAG3C,OAAO,CAAC4B,MAAR,CAAe,UAAUkB,MAAV,EAAkB;AAC3C,iBAAO1B,cAAc,CAAC0B,MAAD,CAAd,KAA2B1B,cAAc,CAACP,YAAD,CAAhD;AACH,SAFa,CAAd;AAGH,OALD,MAMK,IAAI,CAACf,eAAL,EAAsB;AACvB;AACA6C,QAAAA,WAAW,GAAGI,gCAAgC,CAAC/C,OAAD,EAAUa,YAAV,EAAwBO,cAAxB,CAA9C;AACH,OAHI,MAIA;AACDuB,QAAAA,WAAW,GAAG3C,OAAd;AACH;AACJ,KAhBD,MAiBK;AACD2C,MAAAA,WAAW,GAAG3C,OAAO,CAAC4B,MAAR,CAAe,UAAUkB,MAAV,EAAkB;AAAE,eAAOpC,eAAe,CAACkB,MAAD,EAASkB,MAAT,CAAtB;AAAyC,OAA5E,CAAd;;AACA,UAAI,CAAChD,eAAL,EAAsB;AAClB6C,QAAAA,WAAW,GAAGI,gCAAgC,CAACJ,WAAD,EAAc9B,YAAd,EAA4BO,cAA5B,CAA9C;AACH;AACJ;;AACDuB,IAAAA,WAAW,GAAGK,gBAAgB,CAACL,WAAD,EAAc5B,eAAd,CAA9B;AACA,QAAIkC,aAAa,GAAGN,WAAW,CAACO,IAAZ,CAAiB,UAAUrB,UAAV,EAAsB;AACvD,aAAOnB,eAAe,CAACkB,MAAD,EAASC,UAAT,EAAqB,IAArB,CAAtB;AACH,KAFmB,CAApB;;AAGA,QAAIhC,WAAJ,EAAiB;AACb,UAAIsD,oBAAoB,GACxB;AACA;AACA,OAAC,CAACtC,YAAF,IAAkB,CAAC+B,KAAK,CAACC,OAAN,CAAchC,YAAd,CAAnB,GACMH,eAAe,CAACkB,MAAD,EAASf,YAAT,EAAuB,IAAvB,CADrB,GAEM,KALN;;AAMA,UAAI,CAACoC,aAAD,IAAkB,CAACE,oBAAvB,EAA6C;AACzCR,QAAAA,WAAW,CAACS,IAAZ,CAAiBC,aAAa,CAAC;AAC3B1C,UAAAA,UAAU,EAAEA,UADe;AAE3BC,UAAAA,WAAW,EAAEA,WAFc;AAG3B0C,UAAAA,IAAI,EAAEpD,UAHqB;AAI3BuB,UAAAA,KAAK,EAAErB;AAJoB,SAAD,CAA9B;AAMH;AACJ;;AACD,QAAIL,UAAJ,EAAgB;AACZ4C,MAAAA,WAAW,CAACY,OAAZ,CAAoBF,aAAa,CAAC;AAC9B1C,QAAAA,UAAU,EAAEA,UADkB;AAE9BC,QAAAA,WAAW,EAAEA,WAFiB;AAG9B0C,QAAAA,IAAI,EAAEhD,SAHwB;AAI9BmB,QAAAA,KAAK,EAAEjB;AAJuB,OAAD,CAAjC;AAMH;;AACD,WAAOmC,WAAP;AACH,GAvDD;AAwDH,CA1DM;AA2DP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAII,gCAAgC,GAAG,UAAUJ,WAAV,EAAuBa,aAAvB,EAAsCpC,cAAtC,EAAsD;AACzF,MAAI,CAACoC,aAAL,EAAoB;AAChB,WAAOb,WAAP;AACH;;AACD,MAAIc,cAAc,GAAGb,KAAK,CAACC,OAAN,CAAcW,aAAd,IACfA,aAAa,CAACE,GAAd,CAAkBtC,cAAlB,CADe,GAEf,CAACA,cAAc,CAACoC,aAAD,CAAf,CAFN;AAGA,SAAOb,WAAW,CAACf,MAAZ,CAAmB,UAAUC,UAAV,EAAsB;AAAE,WAAO,CAAC4B,cAAc,CAACE,QAAf,CAAwBvC,cAAc,CAACS,UAAD,CAAtC,CAAR;AAA8D,GAAzG,CAAP;AACH,CARD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAImB,gBAAgB,GAAG,UAAUL,WAAV,EAAuBiB,KAAvB,EAA8B;AACjD,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AAAEA,IAAAA,KAAK,GAAG,CAAR;AAAY;;AACpC,SAAOC,MAAM,CAACC,SAAP,CAAiBF,KAAjB,KAA2BA,KAAK,GAAG,CAAnC,GACDjB,WAAW,CAACoB,KAAZ,CAAkB,CAAlB,EAAqBH,KAArB,CADC,GAEDjB,WAFN;AAGH,CALD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIU,aAAa,GAAG,UAAUzD,EAAV,EAAc;AAC9B,MAAIK,EAAE,GAAGL,EAAE,CAACe,UAAZ;AAAA,MAAwBA,UAAU,GAAGV,EAAE,KAAK,KAAK,CAAZ,GAAgB,MAAhB,GAAyBA,EAA9D;AAAA,MAAkEE,EAAE,GAAGP,EAAE,CAACgB,WAA1E;AAAA,MAAuFA,WAAW,GAAGT,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAA5H;AAAA,MAAgIE,EAAE,GAAGT,EAAE,CAAC0D,IAAxI;AAAA,MAA8IA,IAAI,GAAGjD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA1K;AAAA,MAA8KE,EAAE,GAAGX,EAAE,CAAC6B,KAAtL;AAAA,MAA6LA,KAAK,GAAGlB,EAAE,KAAK,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,EAA5N;AACA,MAAIsB,UAAU,GAAG,EAAjB;AACArC,EAAAA,GAAG,CAACqC,UAAD,EAAajB,WAAb,EAA0Ba,KAA1B,CAAH;;AACA,MAAI,OAAOd,UAAP,KAAsB,QAA1B,EAAoC;AAChCnB,IAAAA,GAAG,CAACqC,UAAD,EAAalB,UAAb,EAAyB2C,IAAzB,CAAH;AACH;;AACD,SAAOzB,UAAP;AACH,CARD","sourcesContent":["import { useCallback, isValidElement } from 'react';\nimport set from 'lodash/set';\nimport useChoices from './useChoices';\nimport { useTranslate } from '../i18n';\n/*\n * Returns helper functions for suggestions handling.\n *\n * @param allowDuplicates A boolean indicating whether a suggestion can be added several times\n * @param allowEmpty A boolean indicating whether an empty suggestion should be added\n * @param choices An array of available choices\n * @param emptyText The text to use for the empty suggestion. Defaults to an empty string\n * @param emptyValue The value to use for the empty suggestion. Defaults to `null`\n * @param limitChoicesToValue A boolean indicating whether the initial suggestions should be limited to the currently selected one(s)\n * @param matchSuggestion Optional unless `optionText` is a React element. Function which check whether a choice matches a filter. Must return a boolean.\n * @param optionText Either a string defining the property to use to get the choice text, a function or a React element\n * @param optionValue The property to use to get the choice value\n * @param selectedItem The currently selected item. May be an array of selected items\n * @param suggestionLimit The maximum number of suggestions returned, excluding the empty one if `allowEmpty` is `true`\n * @param translateChoice A boolean indicating whether to option text should be translated\n *\n * @returns An object with helper functions:\n * - getChoiceText: Returns the choice text or a React element\n * - getChoiceValue: Returns the choice value\n * - getSuggestions: A function taking a filter value (string) and returning the matching suggestions\n */\nvar useSuggestions = function (_a) {\n    var allowCreate = _a.allowCreate, allowDuplicates = _a.allowDuplicates, allowEmpty = _a.allowEmpty, choices = _a.choices, _b = _a.createText, createText = _b === void 0 ? 'ra.action.create' : _b, _c = _a.createValue, createValue = _c === void 0 ? '@@create' : _c, _d = _a.emptyText, emptyText = _d === void 0 ? '' : _d, _e = _a.emptyValue, emptyValue = _e === void 0 ? null : _e, limitChoicesToValue = _a.limitChoicesToValue, matchSuggestion = _a.matchSuggestion, optionText = _a.optionText, optionValue = _a.optionValue, selectedItem = _a.selectedItem, _f = _a.suggestionLimit, suggestionLimit = _f === void 0 ? 0 : _f, translateChoice = _a.translateChoice;\n    var translate = useTranslate();\n    var _g = useChoices({\n        optionText: optionText,\n        optionValue: optionValue,\n        translateChoice: translateChoice,\n    }), getChoiceText = _g.getChoiceText, getChoiceValue = _g.getChoiceValue;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    var getSuggestions = useCallback(getSuggestionsFactory({\n        allowCreate: allowCreate,\n        allowDuplicates: allowDuplicates,\n        allowEmpty: allowEmpty,\n        choices: choices,\n        createText: createText,\n        createValue: createValue,\n        emptyText: translate(emptyText, { _: emptyText }),\n        emptyValue: emptyValue,\n        getChoiceText: getChoiceText,\n        getChoiceValue: getChoiceValue,\n        limitChoicesToValue: limitChoicesToValue,\n        matchSuggestion: matchSuggestion,\n        optionText: optionText,\n        optionValue: optionValue,\n        selectedItem: selectedItem,\n        suggestionLimit: suggestionLimit,\n    }), [\n        allowCreate,\n        allowDuplicates,\n        allowEmpty,\n        choices,\n        createText,\n        createValue,\n        emptyText,\n        emptyValue,\n        getChoiceText,\n        getChoiceValue,\n        limitChoicesToValue,\n        matchSuggestion,\n        optionText,\n        optionValue,\n        selectedItem,\n        suggestionLimit,\n        translate,\n    ]);\n    return {\n        getChoiceText: getChoiceText,\n        getChoiceValue: getChoiceValue,\n        getSuggestions: getSuggestions,\n    };\n};\nexport default useSuggestions;\nvar escapeRegExp = function (value) {\n    return value ? value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') : '';\n}; // $& means the whole matched string\n/**\n * Default matcher implementation which check whether the suggestion text matches the filter.\n */\nvar defaultMatchSuggestion = function (getChoiceText) { return function (filter, suggestion, exact) {\n    if (exact === void 0) { exact = false; }\n    var suggestionText = getChoiceText(suggestion);\n    var isReactElement = isValidElement(suggestionText);\n    var regex = escapeRegExp(filter);\n    return isReactElement\n        ? false\n        : suggestionText &&\n            suggestionText.match(\n            // We must escape any RegExp reserved characters to avoid errors\n            // For example, the filter might contains * which must be escaped as \\*\n            new RegExp(exact ? \"^\" + regex + \"$\" : regex, 'i'));\n}; };\n/**\n * Get the suggestions to display after applying a fuzzy search on the available choices\n *\n * @example\n *\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n * getSuggestions({\n *   choices: [{ id: 1, name: 'admin' }, { id: 2, name: 'publisher' }],\n *   optionText: 'name',\n *   optionValue: 'id',\n *   getSuggestionText: choice => choice[optionText],\n * })('pub')\n *\n * // Will return [{ id: 2, name: 'publisher' }]\n */\nexport var getSuggestionsFactory = function (_a) {\n    var _b = _a.allowCreate, allowCreate = _b === void 0 ? false : _b, _c = _a.allowDuplicates, allowDuplicates = _c === void 0 ? false : _c, _d = _a.allowEmpty, allowEmpty = _d === void 0 ? false : _d, _e = _a.choices, choices = _e === void 0 ? [] : _e, _f = _a.createText, createText = _f === void 0 ? 'ra.action.create' : _f, _g = _a.createValue, createValue = _g === void 0 ? '@@create' : _g, _h = _a.emptyText, emptyText = _h === void 0 ? '' : _h, _j = _a.emptyValue, emptyValue = _j === void 0 ? null : _j, _k = _a.optionText, optionText = _k === void 0 ? 'name' : _k, _l = _a.optionValue, optionValue = _l === void 0 ? 'id' : _l, getChoiceText = _a.getChoiceText, getChoiceValue = _a.getChoiceValue, _m = _a.limitChoicesToValue, limitChoicesToValue = _m === void 0 ? false : _m, _o = _a.matchSuggestion, matchSuggestion = _o === void 0 ? defaultMatchSuggestion(getChoiceText) : _o, selectedItem = _a.selectedItem, _p = _a.suggestionLimit, suggestionLimit = _p === void 0 ? 0 : _p;\n    return function (filter) {\n        var suggestions = [];\n        // if an item is selected and matches the filter\n        if (selectedItem &&\n            !Array.isArray(selectedItem) &&\n            matchSuggestion(filter, selectedItem)) {\n            if (limitChoicesToValue) {\n                // display only the selected item\n                suggestions = choices.filter(function (choice) {\n                    return getChoiceValue(choice) === getChoiceValue(selectedItem);\n                });\n            }\n            else if (!allowDuplicates) {\n                // ignore the filter to show more choices\n                suggestions = removeAlreadySelectedSuggestions(choices, selectedItem, getChoiceValue);\n            }\n            else {\n                suggestions = choices;\n            }\n        }\n        else {\n            suggestions = choices.filter(function (choice) { return matchSuggestion(filter, choice); });\n            if (!allowDuplicates) {\n                suggestions = removeAlreadySelectedSuggestions(suggestions, selectedItem, getChoiceValue);\n            }\n        }\n        suggestions = limitSuggestions(suggestions, suggestionLimit);\n        var hasExactMatch = suggestions.some(function (suggestion) {\n            return matchSuggestion(filter, suggestion, true);\n        });\n        if (allowCreate) {\n            var filterIsSelectedItem = \n            // If the selectedItem is an array (for example AutocompleteArrayInput)\n            // we shouldn't try to match\n            !!selectedItem && !Array.isArray(selectedItem)\n                ? matchSuggestion(filter, selectedItem, true)\n                : false;\n            if (!hasExactMatch && !filterIsSelectedItem) {\n                suggestions.push(getSuggestion({\n                    optionText: optionText,\n                    optionValue: optionValue,\n                    text: createText,\n                    value: createValue,\n                }));\n            }\n        }\n        if (allowEmpty) {\n            suggestions.unshift(getSuggestion({\n                optionText: optionText,\n                optionValue: optionValue,\n                text: emptyText,\n                value: emptyValue,\n            }));\n        }\n        return suggestions;\n    };\n};\n/**\n * @example\n *\n * removeAlreadySelectedSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  [{ id: 1, name: 'foo'}]\n * );\n *\n * // Will return [{ id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param selectedItems List of selection\n * @param getChoiceValue Converter function from suggestion to value\n */\nvar removeAlreadySelectedSuggestions = function (suggestions, selectedItems, getChoiceValue) {\n    if (!selectedItems) {\n        return suggestions;\n    }\n    var selectedValues = Array.isArray(selectedItems)\n        ? selectedItems.map(getChoiceValue)\n        : [getChoiceValue(selectedItems)];\n    return suggestions.filter(function (suggestion) { return !selectedValues.includes(getChoiceValue(suggestion)); });\n};\n/**\n * @example\n *\n * limitSuggestions(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n *  1\n * );\n *\n * // Will return [{ id: 1, name: 'foo' }]\n *\n * @param suggestions List of suggestions\n * @param limit\n */\nvar limitSuggestions = function (suggestions, limit) {\n    if (limit === void 0) { limit = 0; }\n    return Number.isInteger(limit) && limit > 0\n        ? suggestions.slice(0, limit)\n        : suggestions;\n};\n/**\n * addSuggestion(\n *  [{ id: 1, name: 'foo'}, { id: 2, name: 'bar' }],\n * );\n *\n * // Will return [{ id: null, name: '' }, { id: 1, name: 'foo' }, , { id: 2, name: 'bar' }]\n *\n * @param suggestions List of suggestions\n * @param options\n * @param options.optionText\n */\nvar getSuggestion = function (_a) {\n    var _b = _a.optionText, optionText = _b === void 0 ? 'name' : _b, _c = _a.optionValue, optionValue = _c === void 0 ? 'id' : _c, _d = _a.text, text = _d === void 0 ? '' : _d, _e = _a.value, value = _e === void 0 ? null : _e;\n    var suggestion = {};\n    set(suggestion, optionValue, value);\n    if (typeof optionText === 'string') {\n        set(suggestion, optionText, text);\n    }\n    return suggestion;\n};\n"]},"metadata":{},"sourceType":"module"}