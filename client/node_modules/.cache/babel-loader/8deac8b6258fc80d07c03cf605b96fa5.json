{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { cloneElement, createElement, isValidElement, useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useVersion } from 'ra-core';\nimport { Table } from '@material-ui/core';\nimport classnames from 'classnames';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport useDatagridStyles from './useDatagridStyles';\nimport DatagridContextProvider from './DatagridContextProvider';\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n *\n * @example Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const currentSort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { ids, data, total, loaded } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         currentSort\n *     );\n *\n *     return (\n *         <Datagrid\n *             basePath=\"\"\n *             currentSort={currentSort}\n *             data={data}\n *             ids={ids}\n *             selectedIds={[]}\n *             loaded={loaded}\n *             total={total}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\n\nvar Datagrid = React.forwardRef(function (props, ref) {\n  var classes = useDatagridStyles(props);\n\n  var _a = props.optimized,\n      optimized = _a === void 0 ? false : _a,\n      _b = props.body,\n      body = _b === void 0 ? optimized ? PureDatagridBody : DatagridBody : _b,\n      _c = props.header,\n      header = _c === void 0 ? DatagridHeader : _c,\n      children = props.children,\n      classesOverride = props.classes,\n      className = props.className,\n      empty = props.empty,\n      expand = props.expand,\n      _d = props.hasBulkActions,\n      hasBulkActions = _d === void 0 ? false : _d,\n      hover = props.hover,\n      isRowSelectable = props.isRowSelectable,\n      isRowExpandable = props.isRowExpandable,\n      resource = props.resource,\n      rowClick = props.rowClick,\n      rowStyle = props.rowStyle,\n      _e = props.size,\n      size = _e === void 0 ? 'small' : _e,\n      rest = __rest(props, [\"optimized\", \"body\", \"header\", \"children\", \"classes\", \"className\", \"empty\", \"expand\", \"hasBulkActions\", \"hover\", \"isRowSelectable\", \"isRowExpandable\", \"resource\", \"rowClick\", \"rowStyle\", \"size\"]);\n\n  var _f = useListContext(props),\n      basePath = _f.basePath,\n      currentSort = _f.currentSort,\n      data = _f.data,\n      ids = _f.ids,\n      loaded = _f.loaded,\n      onSelect = _f.onSelect,\n      onToggleItem = _f.onToggleItem,\n      selectedIds = _f.selectedIds,\n      setSort = _f.setSort,\n      total = _f.total;\n\n  var version = useVersion();\n  var contextValue = useMemo(function () {\n    return {\n      isRowExpandable: isRowExpandable\n    };\n  }, [isRowExpandable]);\n  var lastSelected = useRef(null);\n  useEffect(function () {\n    if (!selectedIds || selectedIds.length === 0) {\n      lastSelected.current = null;\n    }\n  }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var handleToggleItem = useCallback(function (id, event) {\n    var lastSelectedIndex = ids.indexOf(lastSelected.current);\n    lastSelected.current = event.target.checked ? id : null;\n\n    if (event.shiftKey && lastSelectedIndex !== -1) {\n      var index = ids.indexOf(id);\n      var idsBetweenSelections = ids.slice(Math.min(lastSelectedIndex, index), Math.max(lastSelectedIndex, index) + 1);\n      var newSelectedIds = event.target.checked ? union(selectedIds, idsBetweenSelections) : difference(selectedIds, idsBetweenSelections);\n      onSelect(isRowSelectable ? newSelectedIds.filter(function (id) {\n        return isRowSelectable(data[id]);\n      }) : newSelectedIds);\n    } else {\n      onToggleItem(id);\n    }\n  }, [data, ids, isRowSelectable, onSelect, onToggleItem, selectedIds]);\n  /**\n   * if loaded is false, the list displays for the first time, and the dataProvider hasn't answered yet\n   * if loaded is true, the data for the list has at least been returned once by the dataProvider\n   * if loaded is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n   */\n\n  if (loaded === false) {\n    return React.createElement(DatagridLoading, {\n      classes: classes,\n      className: className,\n      expand: expand,\n      hasBulkActions: hasBulkActions,\n      nbChildren: React.Children.count(children),\n      size: size\n    });\n  }\n  /**\n   * Once loaded, the data for the list may be empty. Instead of\n   * displaying the table header with zero data rows,\n   * the datagrid displays nothing or a custom empty component.\n   */\n\n\n  if (loaded && (ids.length === 0 || total === 0)) {\n    if (empty) {\n      return empty;\n    }\n\n    return null;\n  }\n  /**\n   * After the initial load, if the data for the list isn't empty,\n   * and even if the data is refreshing (e.g. after a filter change),\n   * the datagrid displays the current data.\n   */\n\n\n  return React.createElement(DatagridContextProvider, {\n    value: contextValue\n  }, React.createElement(Table, __assign({\n    ref: ref,\n    className: classnames(classes.table, className),\n    size: size\n  }, sanitizeListRestProps(rest)), createOrCloneElement(header, {\n    children: children,\n    classes: classes,\n    className: className,\n    currentSort: currentSort,\n    data: data,\n    hasExpand: !!expand,\n    hasBulkActions: hasBulkActions,\n    ids: ids,\n    isRowSelectable: isRowSelectable,\n    onSelect: onSelect,\n    resource: resource,\n    selectedIds: selectedIds,\n    setSort: setSort\n  }, children), createOrCloneElement(body, {\n    basePath: basePath,\n    className: classes.tbody,\n    classes: classes,\n    expand: expand,\n    rowClick: rowClick,\n    data: data,\n    hasBulkActions: hasBulkActions,\n    hover: hover,\n    ids: ids,\n    onToggleItem: handleToggleItem,\n    resource: resource,\n    rowStyle: rowStyle,\n    selectedIds: selectedIds,\n    isRowSelectable: isRowSelectable,\n    version: version\n  }, children)));\n});\n\nvar createOrCloneElement = function (element, props, children) {\n  return isValidElement(element) ? cloneElement(element, props, children) : createElement(element, props, children);\n};\n\nDatagrid.propTypes = {\n  basePath: PropTypes.string,\n  // @ts-ignore\n  body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  children: PropTypes.node.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  currentSort: PropTypes.exact({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.any,\n  empty: PropTypes.element,\n  // @ts-ignore\n  expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hasBulkActions: PropTypes.bool,\n  // @ts-ignore\n  header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n  hover: PropTypes.bool,\n  ids: PropTypes.arrayOf(PropTypes.any),\n  loading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any),\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  version: PropTypes.number,\n  isRowSelectable: PropTypes.func,\n  isRowExpandable: PropTypes.func\n};\nDatagrid.displayName = 'Datagrid';\nexport default Datagrid;","map":{"version":3,"sources":["/Users/cameronkeene/Documents/GitHub/ACE_Website/client/node_modules/ra-ui-materialui/esm/list/datagrid/Datagrid.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","React","cloneElement","createElement","isValidElement","useCallback","useRef","useEffect","useMemo","PropTypes","sanitizeListRestProps","useListContext","useVersion","Table","classnames","union","difference","DatagridHeader","DatagridLoading","DatagridBody","PureDatagridBody","useDatagridStyles","DatagridContextProvider","Datagrid","forwardRef","props","ref","classes","_a","optimized","_b","body","_c","header","children","classesOverride","className","empty","expand","_d","hasBulkActions","hover","isRowSelectable","isRowExpandable","resource","rowClick","rowStyle","_e","size","rest","_f","basePath","currentSort","data","ids","loaded","onSelect","onToggleItem","selectedIds","setSort","total","version","contextValue","lastSelected","current","JSON","stringify","handleToggleItem","id","event","lastSelectedIndex","target","checked","shiftKey","index","idsBetweenSelections","slice","Math","min","max","newSelectedIds","filter","nbChildren","Children","count","value","table","createOrCloneElement","hasExpand","tbody","element","propTypes","string","oneOfType","elementType","node","isRequired","object","exact","field","order","any","bool","arrayOf","loading","func","number","displayName"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { cloneElement, createElement, isValidElement, useCallback, useRef, useEffect, useMemo, } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps, useListContext, useVersion, } from 'ra-core';\nimport { Table } from '@material-ui/core';\nimport classnames from 'classnames';\nimport union from 'lodash/union';\nimport difference from 'lodash/difference';\nimport { DatagridHeader } from './DatagridHeader';\nimport DatagridLoading from './DatagridLoading';\nimport DatagridBody, { PureDatagridBody } from './DatagridBody';\nimport useDatagridStyles from './useDatagridStyles';\nimport DatagridContextProvider from './DatagridContextProvider';\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n *\n * @example Usage outside of a <List> or a <ReferenceManyField>.\n *\n * const currentSort = { field: 'published_at', order: 'DESC' };\n *\n * export const MyCustomList = (props) => {\n *     const { ids, data, total, loaded } = useGetList(\n *         'posts',\n *         { page: 1, perPage: 10 },\n *         currentSort\n *     );\n *\n *     return (\n *         <Datagrid\n *             basePath=\"\"\n *             currentSort={currentSort}\n *             data={data}\n *             ids={ids}\n *             selectedIds={[]}\n *             loaded={loaded}\n *             total={total}\n *             setSort={() => {\n *                 console.log('set sort');\n *             }}\n *             onSelect={() => {\n *                 console.log('on select');\n *             }}\n *             onToggleItem={() => {\n *                 console.log('on toggle item');\n *             }}\n *         >\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *         </Datagrid>\n *     );\n * }\n */\nvar Datagrid = React.forwardRef(function (props, ref) {\n    var classes = useDatagridStyles(props);\n    var _a = props.optimized, optimized = _a === void 0 ? false : _a, _b = props.body, body = _b === void 0 ? optimized ? PureDatagridBody : DatagridBody : _b, _c = props.header, header = _c === void 0 ? DatagridHeader : _c, children = props.children, classesOverride = props.classes, className = props.className, empty = props.empty, expand = props.expand, _d = props.hasBulkActions, hasBulkActions = _d === void 0 ? false : _d, hover = props.hover, isRowSelectable = props.isRowSelectable, isRowExpandable = props.isRowExpandable, resource = props.resource, rowClick = props.rowClick, rowStyle = props.rowStyle, _e = props.size, size = _e === void 0 ? 'small' : _e, rest = __rest(props, [\"optimized\", \"body\", \"header\", \"children\", \"classes\", \"className\", \"empty\", \"expand\", \"hasBulkActions\", \"hover\", \"isRowSelectable\", \"isRowExpandable\", \"resource\", \"rowClick\", \"rowStyle\", \"size\"]);\n    var _f = useListContext(props), basePath = _f.basePath, currentSort = _f.currentSort, data = _f.data, ids = _f.ids, loaded = _f.loaded, onSelect = _f.onSelect, onToggleItem = _f.onToggleItem, selectedIds = _f.selectedIds, setSort = _f.setSort, total = _f.total;\n    var version = useVersion();\n    var contextValue = useMemo(function () { return ({ isRowExpandable: isRowExpandable }); }, [\n        isRowExpandable,\n    ]);\n    var lastSelected = useRef(null);\n    useEffect(function () {\n        if (!selectedIds || selectedIds.length === 0) {\n            lastSelected.current = null;\n        }\n    }, [JSON.stringify(selectedIds)]); // eslint-disable-line react-hooks/exhaustive-deps\n    var handleToggleItem = useCallback(function (id, event) {\n        var lastSelectedIndex = ids.indexOf(lastSelected.current);\n        lastSelected.current = event.target.checked ? id : null;\n        if (event.shiftKey && lastSelectedIndex !== -1) {\n            var index = ids.indexOf(id);\n            var idsBetweenSelections = ids.slice(Math.min(lastSelectedIndex, index), Math.max(lastSelectedIndex, index) + 1);\n            var newSelectedIds = event.target.checked\n                ? union(selectedIds, idsBetweenSelections)\n                : difference(selectedIds, idsBetweenSelections);\n            onSelect(isRowSelectable\n                ? newSelectedIds.filter(function (id) {\n                    return isRowSelectable(data[id]);\n                })\n                : newSelectedIds);\n        }\n        else {\n            onToggleItem(id);\n        }\n    }, [data, ids, isRowSelectable, onSelect, onToggleItem, selectedIds]);\n    /**\n     * if loaded is false, the list displays for the first time, and the dataProvider hasn't answered yet\n     * if loaded is true, the data for the list has at least been returned once by the dataProvider\n     * if loaded is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n     */\n    if (loaded === false) {\n        return (React.createElement(DatagridLoading, { classes: classes, className: className, expand: expand, hasBulkActions: hasBulkActions, nbChildren: React.Children.count(children), size: size }));\n    }\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the datagrid displays nothing or a custom empty component.\n     */\n    if (loaded && (ids.length === 0 || total === 0)) {\n        if (empty) {\n            return empty;\n        }\n        return null;\n    }\n    /**\n     * After the initial load, if the data for the list isn't empty,\n     * and even if the data is refreshing (e.g. after a filter change),\n     * the datagrid displays the current data.\n     */\n    return (React.createElement(DatagridContextProvider, { value: contextValue },\n        React.createElement(Table, __assign({ ref: ref, className: classnames(classes.table, className), size: size }, sanitizeListRestProps(rest)),\n            createOrCloneElement(header, {\n                children: children,\n                classes: classes,\n                className: className,\n                currentSort: currentSort,\n                data: data,\n                hasExpand: !!expand,\n                hasBulkActions: hasBulkActions,\n                ids: ids,\n                isRowSelectable: isRowSelectable,\n                onSelect: onSelect,\n                resource: resource,\n                selectedIds: selectedIds,\n                setSort: setSort,\n            }, children),\n            createOrCloneElement(body, {\n                basePath: basePath,\n                className: classes.tbody,\n                classes: classes,\n                expand: expand,\n                rowClick: rowClick,\n                data: data,\n                hasBulkActions: hasBulkActions,\n                hover: hover,\n                ids: ids,\n                onToggleItem: handleToggleItem,\n                resource: resource,\n                rowStyle: rowStyle,\n                selectedIds: selectedIds,\n                isRowSelectable: isRowSelectable,\n                version: version,\n            }, children))));\n});\nvar createOrCloneElement = function (element, props, children) {\n    return isValidElement(element)\n        ? cloneElement(element, props, children)\n        : createElement(element, props, children);\n};\nDatagrid.propTypes = {\n    basePath: PropTypes.string,\n    // @ts-ignore\n    body: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    children: PropTypes.node.isRequired,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    currentSort: PropTypes.exact({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.any,\n    empty: PropTypes.element,\n    // @ts-ignore\n    expand: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hasBulkActions: PropTypes.bool,\n    // @ts-ignore\n    header: PropTypes.oneOfType([PropTypes.element, PropTypes.elementType]),\n    hover: PropTypes.bool,\n    ids: PropTypes.arrayOf(PropTypes.any),\n    loading: PropTypes.bool,\n    onSelect: PropTypes.func,\n    onToggleItem: PropTypes.func,\n    resource: PropTypes.string,\n    rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n    rowStyle: PropTypes.func,\n    selectedIds: PropTypes.arrayOf(PropTypes.any),\n    setSort: PropTypes.func,\n    total: PropTypes.number,\n    version: PropTypes.number,\n    isRowSelectable: PropTypes.func,\n    isRowExpandable: PropTypes.func,\n};\nDatagrid.displayName = 'Datagrid';\nexport default Datagrid;\n"]},"metadata":{},"sourceType":"module"}