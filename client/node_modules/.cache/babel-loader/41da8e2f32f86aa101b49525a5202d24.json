{"ast":null,"code":"var removeDiacritics = require('diacritic').clean; // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\n\n\nvar specialCharsRegex = /[.*+?^${}()|[\\]\\\\]/g; // http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\n\nvar wordCharacterRegex = /[a-z0-9_]/i;\nvar whitespacesRegex = /\\s+/;\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(specialCharsRegex, '\\\\$&');\n}\n\nfunction extend(subject, baseObject) {\n  subject = subject || {};\n  Object.keys(subject).forEach(function (key) {\n    baseObject[key] = !!subject[key];\n  });\n  return baseObject;\n}\n\nmodule.exports = function match(text, query, options) {\n  options = extend(options, {\n    insideWords: false,\n    findAllOccurrences: false,\n    requireMatchAll: false\n  });\n  text = removeDiacritics(text);\n  query = removeDiacritics(query);\n  return query.trim().split(whitespacesRegex) // If query is blank, we'll get empty string here, so let's filter it out.\n  .filter(function (word) {\n    return word.length > 0;\n  }).reduce(function (result, word) {\n    var wordLen = word.length;\n    var prefix = !options.insideWords && wordCharacterRegex.test(word[0]) ? '\\\\b' : '';\n    var regex = new RegExp(prefix + escapeRegexCharacters(word), 'i');\n    var occurrence, index;\n    occurrence = regex.exec(text);\n\n    if (options.requireMatchAll && occurrence === null) {\n      text = '';\n      return [];\n    }\n\n    while (occurrence) {\n      index = occurrence.index;\n      result.push([index, index + wordLen]); // Replace what we just found with spaces so we don't find it again.\n\n      text = text.slice(0, index) + new Array(wordLen + 1).join(' ') + text.slice(index + wordLen);\n\n      if (!options.findAllOccurrences) {\n        break;\n      }\n\n      occurrence = regex.exec(text);\n    }\n\n    return result;\n  }, []).sort(function (match1, match2) {\n    return match1[0] - match2[0];\n  });\n};","map":{"version":3,"sources":["/Users/cameronkeene/Documents/GitHub/ACE_Website/client/node_modules/autosuggest-highlight/match/index.js"],"names":["removeDiacritics","require","clean","specialCharsRegex","wordCharacterRegex","whitespacesRegex","escapeRegexCharacters","str","replace","extend","subject","baseObject","Object","keys","forEach","key","module","exports","match","text","query","options","insideWords","findAllOccurrences","requireMatchAll","trim","split","filter","word","length","reduce","result","wordLen","prefix","test","regex","RegExp","occurrence","index","exec","push","slice","Array","join","sort","match1","match2"],"mappings":"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","sourcesContent":["var removeDiacritics = require('diacritic').clean;\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\nvar specialCharsRegex = /[.*+?^${}()|[\\]\\\\]/g;\n\n// http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.2.6\nvar wordCharacterRegex = /[a-z0-9_]/i;\n\nvar whitespacesRegex = /\\s+/;\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(specialCharsRegex, '\\\\$&');\n}\n\nfunction extend(subject, baseObject) {\n  subject = subject || {};\n  Object.keys(subject).forEach(function(key) {\n    baseObject[key] = !!subject[key];\n  });\n  return baseObject;\n}\n\nmodule.exports = function match(text, query, options) {\n  options = extend(options, {\n    insideWords: false,\n    findAllOccurrences: false,\n    requireMatchAll: false\n  });\n\n  text = removeDiacritics(text);\n  query = removeDiacritics(query);\n\n  return (\n    query\n      .trim()\n      .split(whitespacesRegex)\n      // If query is blank, we'll get empty string here, so let's filter it out.\n      .filter(function(word) {\n        return word.length > 0;\n      })\n      .reduce(function(result, word) {\n        var wordLen = word.length;\n        var prefix =\n          !options.insideWords && wordCharacterRegex.test(word[0]) ? '\\\\b' : '';\n        var regex = new RegExp(prefix + escapeRegexCharacters(word), 'i');\n        var occurrence, index;\n\n        occurrence = regex.exec(text);\n        if (options.requireMatchAll && occurrence === null) {\n          text = '';\n          return [];\n        }\n\n        while (occurrence) {\n          index = occurrence.index;\n          result.push([index, index + wordLen]);\n\n          // Replace what we just found with spaces so we don't find it again.\n          text =\n            text.slice(0, index) +\n            new Array(wordLen + 1).join(' ') +\n            text.slice(index + wordLen);\n\n          if (!options.findAllOccurrences) {\n            break;\n          }\n\n          occurrence = regex.exec(text);\n        }\n\n        return result;\n      }, [])\n      .sort(function(match1, match2) {\n        return match1[0] - match2[0];\n      })\n  );\n};\n"]},"metadata":{},"sourceType":"script"}